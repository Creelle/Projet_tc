## Project LMECA2150-Thermal cycle
# Material related to the combustion of the Gas turbine
#
# Author: Paolo Thiran & Gauthier Limpens
# Version: 2020
#
# Students can modify this script.
# However, the arguments for the GT defined in GT_arguments.py CANNOT be modified


from thermochem import janaf
db = janaf.Janafdb();

import numpy as np;
import GT_arguments as GT_arg;
import GTcomb_arguments as GTcomb_arg;
import combustionGT as comb;
import matplotlib.pyplot as plt


def GT(GT_input):
    """ 
     GT Gas turbine modelisation
     GT(P_e,options,display) compute the thermodynamics states for a Gas
     turbine based on several inputs (given in OPTION) and based on a given 
     electricity production P_e. It returns the main results. It can as well
     plots graphs if input argument DISPLAY = true (<=> DISPLAY=1)
    
     INPUTS (some inputs can be dependent on others => only one of these 2 can
             be activated) Refer to Fig 3.1 from reference book (in english)
     P_E = electrical power output target [kW]
     k_mec [-] : Shaft losses 
     T_0   [°C] : Reference temperature
     T_ext [°C] : External temperature
     r     [-] : Compression ratio
     k_cc  [-] : Coefficient of pressure losses due to combustion
                 chamber
     T_3   [°C] : Temperature after combustion (before turbine)
     eta_PiC[-] : Intern polytropic efficiency (Rendement
                  polytropique interne) for compression
     eta_PiT[-] : Intern polytropic efficiency (Rendement
                  polytropique interne) for expansion
     DISPLAY = 1 or 0. If 1, then the code should plot graphics. If 0, then the
              do not plot."""
    arg_in = GT_input;
    
    ## Check input arguments
    # ======================
    Pe = arg_in.Pe;
    if Pe ==-1.:
        Pe = 50e3;#50MWe
    T_ext = arg_in.T_ext;
    if T_ext ==-1.:
        T_ext = 288.15;#15°C
    r = arg_in.r;
    if r ==-1.:
        r = 10;#compression ratio = 10;
    eta_PiC = arg_in.eta_PiC;
    if eta_PiC ==-1.:
        eta_PiC = 0.9;#max temperature = 1050°C
    eta_PiT = arg_in.eta_PiT;
    if eta_PiT ==-1.:
        eta_PiT = 0.9;#max temperature = 1050°C
    
    
    ## preliminary data (air)
    # ======================
    
    # Your job
    
    # cp air at 15°C (298K): [kJ/mol/K]
    O2 = db.getphasedata('O2','g');
    #print(O2.cp(298))


   
    ## cycle definition
    # =================

    # The following function can be modified by the student.
    # comb.combustionGT(GTcomb_arg.comb_input())

    ## define output arguments
    # ======================
    outputs = GT_arg.GT_outputs();
    outputs.eta[1] = 0.35;
    
    # Your job
    
    
    
    
    ## Generate graph to export:
    # ==========================
    # random data:
    t = np.arange(0.0, 2.0, 0.01)
    s1 = np.sin(2*np.pi*t)
    s2 = np.sin(4*np.pi*t)

    # My 1st figure:
    fig1 = plt.figure(1)
    plt.plot(t, s1)

    # My 2nd figure:
    fig2 = plt.figure(2)
    plt.plot(t, s2)
    
    # ...    
    outputs.fig = [fig1, fig2]
    
    return outputs;




#tests    
# GT_simple_outputs = GT_simple(GT_arg.GT_input());

# Print and save all figure generated by students
#for i in range (len(GT_simple_outputs.fig)): 
#    GT_simple_outputs.fig[i].show()
#    figname='figures/GT%d.pdf' % i
#    GT_simple_outputs.fig[i].savefig(figname)  
    
